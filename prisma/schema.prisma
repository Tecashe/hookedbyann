// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_NEON_DATABASE_URL")
}

// User model - managed by Clerk
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  image     String?
  role      String   @default("customer") // "customer" or "admin"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders   Order[]
  reviews  Review[]
  cart     Cart?
  wishlist WishlistItem[]
}

// Product model
model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Int // in cents
  category    String
  colors      String[] // JSON array of color options
  sizes       String[] // JSON array of size options
  images      String[] // Array of image URLs
  gallery     String[] // Additional gallery images
  stock       Int      @default(0)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  cartItems     CartItem[]
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
}

// Cart model
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Cart Item model
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int      @default(1)
  color     String?
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, color, size])
}

// Order model
model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  totalPrice      Int // in cents
  status          String      @default("pending") // pending, processing, shipped, delivered, cancelled
  shippingAddress String      @db.Text
  email           String
  phone           String
  stripeSessionId String? // Stripe checkout session ID
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// Order Item model
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Int // price at time of purchase
  color     String?
  size      String?
  createdAt DateTime @default(now())
}

// Review model
model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int // 1-5
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

// Wishlist model
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

// Coupon model
model Coupon {
  id        String    @id @default(cuid())
  code      String    @unique
  discount  Int // percentage (0-100) or fixed amount in cents
  type      String    @default("percentage") // "percentage" or "fixed"
  maxUses   Int? // null = unlimited
  usedCount Int       @default(0)
  minAmount Int? // minimum order amount in cents
  expiresAt DateTime?
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
